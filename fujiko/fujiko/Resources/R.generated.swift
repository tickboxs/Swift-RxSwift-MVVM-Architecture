//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `Poppins-Medium.ttf`.
    static let poppinsMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Medium", pathExtension: "ttf")
    /// Resource file `Poppins-Regular.ttf`.
    static let poppinsRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Regular", pathExtension: "ttf")

    /// `bundle.url(forResource: "Poppins-Medium", withExtension: "ttf")`
    static func poppinsMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Regular", withExtension: "ttf")`
    static func poppinsRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 2 fonts.
  struct font: Rswift.Validatable {
    /// Font `Poppins-Medium`.
    static let poppinsMedium = Rswift.FontResource(fontName: "Poppins-Medium")
    /// Font `Poppins-Regular`.
    static let poppinsRegular = Rswift.FontResource(fontName: "Poppins-Regular")

    /// `UIFont(name: "Poppins-Medium", size: ...)`
    static func poppinsMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsMedium, size: size)
    }

    /// `UIFont(name: "Poppins-Regular", size: ...)`
    static func poppinsRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsRegular, size: size)
    }

    static func validate() throws {
      if R.font.poppinsMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Medium' could not be loaded, is 'Poppins-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Regular' could not be loaded, is 'Poppins-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 40 images.
  struct image {
    /// Image `add`.
    static let add = Rswift.ImageResource(bundle: R.hostingBundle, name: "add")
    /// Image `assignee`.
    static let assignee = Rswift.ImageResource(bundle: R.hostingBundle, name: "assignee")
    /// Image `attachment`.
    static let attachment = Rswift.ImageResource(bundle: R.hostingBundle, name: "attachment")
    /// Image `attachments`.
    static let attachments = Rswift.ImageResource(bundle: R.hostingBundle, name: "attachments")
    /// Image `avatar`.
    static let avatar = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `brian`.
    static let brian = Rswift.ImageResource(bundle: R.hostingBundle, name: "brian")
    /// Image `calendar`.
    static let calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "calendar")
    /// Image `call`.
    static let call = Rswift.ImageResource(bundle: R.hostingBundle, name: "call")
    /// Image `chat`.
    static let chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat")
    /// Image `checkbox_selected`.
    static let checkbox_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox_selected")
    /// Image `checkbox_unselected`.
    static let checkbox_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox_unselected")
    /// Image `checklist`.
    static let checklist = Rswift.ImageResource(bundle: R.hostingBundle, name: "checklist")
    /// Image `dashboard`.
    static let dashboard = Rswift.ImageResource(bundle: R.hostingBundle, name: "dashboard")
    /// Image `description`.
    static let description = Rswift.ImageResource(bundle: R.hostingBundle, name: "description")
    /// Image `due_date`.
    static let due_date = Rswift.ImageResource(bundle: R.hostingBundle, name: "due_date")
    /// Image `edit`.
    static let edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit")
    /// Image `intro_background`.
    static let intro_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "intro_background")
    /// Image `lauren`.
    static let lauren = Rswift.ImageResource(bundle: R.hostingBundle, name: "lauren")
    /// Image `left_arrow`.
    static let left_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "left_arrow")
    /// Image `liam`.
    static let liam = Rswift.ImageResource(bundle: R.hostingBundle, name: "liam")
    /// Image `login_background`.
    static let login_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_background")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `matt`.
    static let matt = Rswift.ImageResource(bundle: R.hostingBundle, name: "matt")
    /// Image `menu`.
    static let menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu")
    /// Image `notification icons`.
    static let notificationIcons = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification icons")
    /// Image `notifications`.
    static let notifications = Rswift.ImageResource(bundle: R.hostingBundle, name: "notifications")
    /// Image `photo`.
    static let photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "photo")
    /// Image `profile`.
    static let profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile")
    /// Image `right_arrow`.
    static let right_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "right_arrow")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `settings`.
    static let settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings")
    /// Image `statistics`.
    static let statistics = Rswift.ImageResource(bundle: R.hostingBundle, name: "statistics")
    /// Image `task`.
    static let task = Rswift.ImageResource(bundle: R.hostingBundle, name: "task")
    /// Image `thunder`.
    static let thunder = Rswift.ImageResource(bundle: R.hostingBundle, name: "thunder")
    /// Image `time`.
    static let time = Rswift.ImageResource(bundle: R.hostingBundle, name: "time")
    /// Image `verify`.
    static let verify = Rswift.ImageResource(bundle: R.hostingBundle, name: "verify")
    /// Image `view`.
    static let view = Rswift.ImageResource(bundle: R.hostingBundle, name: "view")
    /// Image `watch_selected`.
    static let watch_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "watch_selected")
    /// Image `watch_unselected`.
    static let watch_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "watch_unselected")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add", bundle: ..., traitCollection: ...)`
    static func add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "assignee", bundle: ..., traitCollection: ...)`
    static func assignee(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.assignee, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "attachment", bundle: ..., traitCollection: ...)`
    static func attachment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.attachment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "attachments", bundle: ..., traitCollection: ...)`
    static func attachments(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.attachments, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar", bundle: ..., traitCollection: ...)`
    static func avatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "brian", bundle: ..., traitCollection: ...)`
    static func brian(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.brian, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "calendar", bundle: ..., traitCollection: ...)`
    static func calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "call", bundle: ..., traitCollection: ...)`
    static func call(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.call, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat", bundle: ..., traitCollection: ...)`
    static func chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkbox_selected", bundle: ..., traitCollection: ...)`
    static func checkbox_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkbox_unselected", bundle: ..., traitCollection: ...)`
    static func checkbox_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox_unselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checklist", bundle: ..., traitCollection: ...)`
    static func checklist(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checklist, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dashboard", bundle: ..., traitCollection: ...)`
    static func dashboard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dashboard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "description", bundle: ..., traitCollection: ...)`
    static func description(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.description, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "due_date", bundle: ..., traitCollection: ...)`
    static func due_date(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.due_date, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit", bundle: ..., traitCollection: ...)`
    static func edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "intro_background", bundle: ..., traitCollection: ...)`
    static func intro_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.intro_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lauren", bundle: ..., traitCollection: ...)`
    static func lauren(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lauren, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "left_arrow", bundle: ..., traitCollection: ...)`
    static func left_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.left_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "liam", bundle: ..., traitCollection: ...)`
    static func liam(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.liam, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_background", bundle: ..., traitCollection: ...)`
    static func login_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "matt", bundle: ..., traitCollection: ...)`
    static func matt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.matt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu", bundle: ..., traitCollection: ...)`
    static func menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notification icons", bundle: ..., traitCollection: ...)`
    static func notificationIcons(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notificationIcons, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notifications", bundle: ..., traitCollection: ...)`
    static func notifications(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notifications, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "photo", bundle: ..., traitCollection: ...)`
    static func photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile", bundle: ..., traitCollection: ...)`
    static func profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "right_arrow", bundle: ..., traitCollection: ...)`
    static func right_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.right_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings", bundle: ..., traitCollection: ...)`
    static func settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "statistics", bundle: ..., traitCollection: ...)`
    static func statistics(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.statistics, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "task", bundle: ..., traitCollection: ...)`
    static func task(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.task, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "thunder", bundle: ..., traitCollection: ...)`
    static func thunder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thunder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "time", bundle: ..., traitCollection: ...)`
    static func time(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.time, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "verify", bundle: ..., traitCollection: ...)`
    static func verify(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.verify, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "view", bundle: ..., traitCollection: ...)`
    static func view(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.view, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "watch_selected", bundle: ..., traitCollection: ...)`
    static func watch_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.watch_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "watch_unselected", bundle: ..., traitCollection: ...)`
    static func watch_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.watch_unselected, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 29 nibs.
  struct nib {
    /// Nib `AddProjectViewController`.
    static let addProjectViewController = _R.nib._AddProjectViewController()
    /// Nib `AddTaskViewController`.
    static let addTaskViewController = _R.nib._AddTaskViewController()
    /// Nib `CalendarViewController`.
    static let calendarViewController = _R.nib._CalendarViewController()
    /// Nib `ChatCell`.
    static let chatCell = _R.nib._ChatCell()
    /// Nib `ChatViewController`.
    static let chatViewController = _R.nib._ChatViewController()
    /// Nib `DashboardViewController`.
    static let dashboardViewController = _R.nib._DashboardViewController()
    /// Nib `HelpViewController`.
    static let helpViewController = _R.nib._HelpViewController()
    /// Nib `IntroViewController`.
    static let introViewController = _R.nib._IntroViewController()
    /// Nib `InviteCell`.
    static let inviteCell = _R.nib._InviteCell()
    /// Nib `InviteViewController`.
    static let inviteViewController = _R.nib._InviteViewController()
    /// Nib `LoginViewController`.
    static let loginViewController = _R.nib._LoginViewController()
    /// Nib `MessagesCell`.
    static let messagesCell = _R.nib._MessagesCell()
    /// Nib `MessagesViewController`.
    static let messagesViewController = _R.nib._MessagesViewController()
    /// Nib `NotificationsCell`.
    static let notificationsCell = _R.nib._NotificationsCell()
    /// Nib `NotificationsViewController`.
    static let notificationsViewController = _R.nib._NotificationsViewController()
    /// Nib `PrivacyViewController`.
    static let privacyViewController = _R.nib._PrivacyViewController()
    /// Nib `ProfileCell`.
    static let profileCell = _R.nib._ProfileCell()
    /// Nib `ProfileViewController`.
    static let profileViewController = _R.nib._ProfileViewController()
    /// Nib `SearchViewController`.
    static let searchViewController = _R.nib._SearchViewController()
    /// Nib `SettingsCell`.
    static let settingsCell = _R.nib._SettingsCell()
    /// Nib `SettingsViewController`.
    static let settingsViewController = _R.nib._SettingsViewController()
    /// Nib `StatisticsItemView`.
    static let statisticsItemView = _R.nib._StatisticsItemView()
    /// Nib `StatisticsViewController`.
    static let statisticsViewController = _R.nib._StatisticsViewController()
    /// Nib `TaskCell`.
    static let taskCell = _R.nib._TaskCell()
    /// Nib `TaskOverviewViewController`.
    static let taskOverviewViewController = _R.nib._TaskOverviewViewController()
    /// Nib `TermsViewController`.
    static let termsViewController = _R.nib._TermsViewController()
    /// Nib `UserDetailCell`.
    static let userDetailCell = _R.nib._UserDetailCell()
    /// Nib `UserDetailViewController`.
    static let userDetailViewController = _R.nib._UserDetailViewController()
    /// Nib `VerifyViewController`.
    static let verifyViewController = _R.nib._VerifyViewController()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddProjectViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addProjectViewController) instead")
    static func addProjectViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addProjectViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddTaskViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addTaskViewController) instead")
    static func addTaskViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addTaskViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CalendarViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.calendarViewController) instead")
    static func calendarViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.calendarViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ChatCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chatCell) instead")
    static func chatCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ChatViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chatViewController) instead")
    static func chatViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DashboardViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dashboardViewController) instead")
    static func dashboardViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dashboardViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HelpViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.helpViewController) instead")
    static func helpViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.helpViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IntroViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.introViewController) instead")
    static func introViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.introViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "InviteCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.inviteCell) instead")
    static func inviteCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.inviteCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "InviteViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.inviteViewController) instead")
    static func inviteViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.inviteViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LoginViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loginViewController) instead")
    static func loginViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loginViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MessagesCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.messagesCell) instead")
    static func messagesCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.messagesCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MessagesViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.messagesViewController) instead")
    static func messagesViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.messagesViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationsCell) instead")
    static func notificationsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationsCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationsViewController) instead")
    static func notificationsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PrivacyViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.privacyViewController) instead")
    static func privacyViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.privacyViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProfileCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileCell) instead")
    static func profileCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProfileViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileViewController) instead")
    static func profileViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchViewController) instead")
    static func searchViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SettingsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.settingsCell) instead")
    static func settingsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingsCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SettingsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.settingsViewController) instead")
    static func settingsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "StatisticsItemView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.statisticsItemView) instead")
    static func statisticsItemView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.statisticsItemView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "StatisticsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.statisticsViewController) instead")
    static func statisticsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.statisticsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TaskCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.taskCell) instead")
    static func taskCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.taskCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TaskOverviewViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.taskOverviewViewController) instead")
    static func taskOverviewViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.taskOverviewViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TermsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.termsViewController) instead")
    static func termsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.termsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserDetailCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userDetailCell) instead")
    static func userDetailCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userDetailCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserDetailViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userDetailViewController) instead")
    static func userDetailViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userDetailViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VerifyViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.verifyViewController) instead")
    static func verifyViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.verifyViewController)
    }
    #endif

    static func addProjectViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ScrollView? {
      return R.nib.addProjectViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ScrollView
    }

    static func addTaskViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ScrollView? {
      return R.nib.addTaskViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ScrollView
    }

    static func calendarViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.calendarViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func chatCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatCell? {
      return R.nib.chatCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatCell
    }

    static func chatViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.chatViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func dashboardViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.dashboardViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func helpViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.helpViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func introViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.introViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func inviteCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InviteCell? {
      return R.nib.inviteCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InviteCell
    }

    static func inviteViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.inviteViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func loginViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.loginViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func messagesCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MessagesCell? {
      return R.nib.messagesCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MessagesCell
    }

    static func messagesViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.messagesViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func notificationsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationsCell? {
      return R.nib.notificationsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationsCell
    }

    static func notificationsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.notificationsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func privacyViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.privacyViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func profileCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileCell? {
      return R.nib.profileCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileCell
    }

    static func profileViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.profileViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func searchViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.searchViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func settingsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsCell? {
      return R.nib.settingsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsCell
    }

    static func settingsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.settingsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func statisticsItemView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.statisticsItemView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func statisticsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.statisticsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func taskCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TaskCell? {
      return R.nib.taskCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TaskCell
    }

    static func taskOverviewViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ScrollView? {
      return R.nib.taskOverviewViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ScrollView
    }

    static func termsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.termsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func userDetailCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserDetailCell? {
      return R.nib.userDetailCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserDetailCell
    }

    static func userDetailViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.userDetailViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func verifyViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> View? {
      return R.nib.verifyViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? View
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 8 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ChatCell`.
    static let chatCell: Rswift.ReuseIdentifier<ChatCell> = Rswift.ReuseIdentifier(identifier: "ChatCell")
    /// Reuse identifier `InviteCell`.
    static let inviteCell: Rswift.ReuseIdentifier<InviteCell> = Rswift.ReuseIdentifier(identifier: "InviteCell")
    /// Reuse identifier `MessageCell`.
    static let messageCell: Rswift.ReuseIdentifier<MessagesCell> = Rswift.ReuseIdentifier(identifier: "MessageCell")
    /// Reuse identifier `NotificationsCell`.
    static let notificationsCell: Rswift.ReuseIdentifier<NotificationsCell> = Rswift.ReuseIdentifier(identifier: "NotificationsCell")
    /// Reuse identifier `ProfileCell`.
    static let profileCell: Rswift.ReuseIdentifier<ProfileCell> = Rswift.ReuseIdentifier(identifier: "ProfileCell")
    /// Reuse identifier `SettingsCell`.
    static let settingsCell: Rswift.ReuseIdentifier<SettingsCell> = Rswift.ReuseIdentifier(identifier: "SettingsCell")
    /// Reuse identifier `TaskCell`.
    static let taskCell: Rswift.ReuseIdentifier<TaskCell> = Rswift.ReuseIdentifier(identifier: "TaskCell")
    /// Reuse identifier `UserDetailCell`.
    static let userDetailCell: Rswift.ReuseIdentifier<UserDetailCell> = Rswift.ReuseIdentifier(identifier: "UserDetailCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.i18n` struct is generated, and contains static references to 40 localization keys.
    struct i18n {
      /// en translation: Add Project
      ///
      /// Locales: zh-Hans, en
      static let add_project = Rswift.StringResource(key: "add_project", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Add Task
      ///
      /// Locales: zh-Hans, en
      static let add_task = Rswift.StringResource(key: "add_task", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Calendar
      ///
      /// Locales: zh-Hans, en
      static let calendar = Rswift.StringResource(key: "calendar", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Call
      ///
      /// Locales: zh-Hans, en
      static let call = Rswift.StringResource(key: "call", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Chat
      ///
      /// Locales: zh-Hans, en
      static let chat = Rswift.StringResource(key: "chat", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Code Resent
      ///
      /// Locales: zh-Hans, en
      static let code_resent = Rswift.StringResource(key: "code_resent", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Dark Mode
      ///
      /// Locales: zh-Hans, en
      static let dark_mode = Rswift.StringResource(key: "dark_mode", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Dashboard
      ///
      /// Locales: zh-Hans, en
      static let dashboard = Rswift.StringResource(key: "dashboard", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Didn’t get the code?
      ///
      /// Locales: zh-Hans, en
      static let not_get_code = Rswift.StringResource(key: "not_get_code", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: zh-Hans, en
      static let email = Rswift.StringResource(key: "email", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Help
      ///
      /// Locales: zh-Hans, en
      static let help = Rswift.StringResource(key: "help", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Invite
      ///
      /// Locales: zh-Hans, en
      static let invite = Rswift.StringResource(key: "invite", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: zh-Hans, en
      static let login = Rswift.StringResource(key: "login", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Manage your tasks
      ///
      /// Locales: zh-Hans, en
      static let slogen_header = Rswift.StringResource(key: "slogen_header", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Member Since
      ///
      /// Locales: zh-Hans, en
      static let member_since = Rswift.StringResource(key: "member_since", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Message
      ///
      /// Locales: zh-Hans, en
      static let message = Rswift.StringResource(key: "message", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: zh-Hans, en
      static let name = Rswift.StringResource(key: "name", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Not listed?Input email address to invite people.
      ///
      /// Locales: zh-Hans, en
      static let not_listed = Rswift.StringResource(key: "not_listed", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Notifications
      ///
      /// Locales: zh-Hans, en
      static let notifications = Rswift.StringResource(key: "notifications", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Organise and simplify your tasks. Collaborate with colleagues and send real-time messages.
      ///
      /// Locales: zh-Hans, en
      static let slogen_description = Rswift.StringResource(key: "slogen_description", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: zh-Hans, en
      static let password = Rswift.StringResource(key: "password", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Please enter the verification code we sent to your email address.
      ///
      /// Locales: zh-Hans, en
      static let verify_description = Rswift.StringResource(key: "verify_description", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Privacy
      ///
      /// Locales: zh-Hans, en
      static let privacy = Rswift.StringResource(key: "privacy", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Profile
      ///
      /// Locales: zh-Hans, en
      static let profile = Rswift.StringResource(key: "profile", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Reminders
      ///
      /// Locales: zh-Hans, en
      static let reminders = Rswift.StringResource(key: "reminders", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Resend
      ///
      /// Locales: zh-Hans, en
      static let resend = Rswift.StringResource(key: "resend", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Role
      ///
      /// Locales: zh-Hans, en
      static let role = Rswift.StringResource(key: "role", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Search
      ///
      /// Locales: zh-Hans, en
      static let search = Rswift.StringResource(key: "search", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: zh-Hans, en
      static let settings = Rswift.StringResource(key: "settings", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Sign Up
      ///
      /// Locales: zh-Hans, en
      static let signUp = Rswift.StringResource(key: "signUp", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Statistics
      ///
      /// Locales: zh-Hans, en
      static let statistics = Rswift.StringResource(key: "statistics", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Status
      ///
      /// Locales: zh-Hans, en
      static let status = Rswift.StringResource(key: "status", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Success
      ///
      /// Locales: zh-Hans, en
      static let success = Rswift.StringResource(key: "success", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Team
      ///
      /// Locales: zh-Hans, en
      static let team = Rswift.StringResource(key: "team", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Terms & Conditions
      ///
      /// Locales: zh-Hans, en
      static let terms_conditions = Rswift.StringResource(key: "terms_conditions", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: Verify Account
      ///
      /// Locales: zh-Hans, en
      static let verify_header = Rswift.StringResource(key: "verify_header", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: dismiss
      ///
      /// Locales: zh-Hans, en
      static let dismiss = Rswift.StringResource(key: "dismiss", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: email or password wrong
      ///
      /// Locales: zh-Hans, en
      static let email_or_password_wrong = Rswift.StringResource(key: "email_or_password_wrong", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: incorrect email format
      ///
      /// Locales: zh-Hans, en
      static let incorrect_email_format = Rswift.StringResource(key: "incorrect_email_format", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// en translation: incorrect password format.The password can only be 6 to 20 digits of English letters plus numbers and the following special characters!@#$&_-
      ///
      /// Locales: zh-Hans, en
      static let incorrect_password_format = Rswift.StringResource(key: "incorrect_password_format", tableName: "i18n", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)

      /// en translation: Add Project
      ///
      /// Locales: zh-Hans, en
      static func add_project(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_project", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "add_project"
        }

        return NSLocalizedString("add_project", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Add Task
      ///
      /// Locales: zh-Hans, en
      static func add_task(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_task", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "add_task"
        }

        return NSLocalizedString("add_task", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Calendar
      ///
      /// Locales: zh-Hans, en
      static func calendar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("calendar", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "calendar"
        }

        return NSLocalizedString("calendar", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Call
      ///
      /// Locales: zh-Hans, en
      static func call(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("call", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "call"
        }

        return NSLocalizedString("call", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Chat
      ///
      /// Locales: zh-Hans, en
      static func chat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("chat", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "chat"
        }

        return NSLocalizedString("chat", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Code Resent
      ///
      /// Locales: zh-Hans, en
      static func code_resent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("code_resent", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "code_resent"
        }

        return NSLocalizedString("code_resent", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Dark Mode
      ///
      /// Locales: zh-Hans, en
      static func dark_mode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dark_mode", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "dark_mode"
        }

        return NSLocalizedString("dark_mode", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Dashboard
      ///
      /// Locales: zh-Hans, en
      static func dashboard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dashboard", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "dashboard"
        }

        return NSLocalizedString("dashboard", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Didn’t get the code?
      ///
      /// Locales: zh-Hans, en
      static func not_get_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("not_get_code", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "not_get_code"
        }

        return NSLocalizedString("not_get_code", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: zh-Hans, en
      static func email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "email"
        }

        return NSLocalizedString("email", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Help
      ///
      /// Locales: zh-Hans, en
      static func help(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("help", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "help"
        }

        return NSLocalizedString("help", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Invite
      ///
      /// Locales: zh-Hans, en
      static func invite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invite", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "invite"
        }

        return NSLocalizedString("invite", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: zh-Hans, en
      static func login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "login"
        }

        return NSLocalizedString("login", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Manage your tasks
      ///
      /// Locales: zh-Hans, en
      static func slogen_header(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("slogen_header", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "slogen_header"
        }

        return NSLocalizedString("slogen_header", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Member Since
      ///
      /// Locales: zh-Hans, en
      static func member_since(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("member_since", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "member_since"
        }

        return NSLocalizedString("member_since", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Message
      ///
      /// Locales: zh-Hans, en
      static func message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("message", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "message"
        }

        return NSLocalizedString("message", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: zh-Hans, en
      static func name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("name", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "name"
        }

        return NSLocalizedString("name", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Not listed?Input email address to invite people.
      ///
      /// Locales: zh-Hans, en
      static func not_listed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("not_listed", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "not_listed"
        }

        return NSLocalizedString("not_listed", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Notifications
      ///
      /// Locales: zh-Hans, en
      static func notifications(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notifications", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "notifications"
        }

        return NSLocalizedString("notifications", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Organise and simplify your tasks. Collaborate with colleagues and send real-time messages.
      ///
      /// Locales: zh-Hans, en
      static func slogen_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("slogen_description", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "slogen_description"
        }

        return NSLocalizedString("slogen_description", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: zh-Hans, en
      static func password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("password", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "password"
        }

        return NSLocalizedString("password", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the verification code we sent to your email address.
      ///
      /// Locales: zh-Hans, en
      static func verify_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify_description", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "verify_description"
        }

        return NSLocalizedString("verify_description", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Privacy
      ///
      /// Locales: zh-Hans, en
      static func privacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("privacy", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "privacy"
        }

        return NSLocalizedString("privacy", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Profile
      ///
      /// Locales: zh-Hans, en
      static func profile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "profile"
        }

        return NSLocalizedString("profile", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Reminders
      ///
      /// Locales: zh-Hans, en
      static func reminders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reminders", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "reminders"
        }

        return NSLocalizedString("reminders", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Resend
      ///
      /// Locales: zh-Hans, en
      static func resend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("resend", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "resend"
        }

        return NSLocalizedString("resend", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Role
      ///
      /// Locales: zh-Hans, en
      static func role(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("role", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "role"
        }

        return NSLocalizedString("role", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Search
      ///
      /// Locales: zh-Hans, en
      static func search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("search", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "search"
        }

        return NSLocalizedString("search", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: zh-Hans, en
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "settings"
        }

        return NSLocalizedString("settings", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Sign Up
      ///
      /// Locales: zh-Hans, en
      static func signUp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signUp", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "signUp"
        }

        return NSLocalizedString("signUp", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Statistics
      ///
      /// Locales: zh-Hans, en
      static func statistics(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("statistics", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "statistics"
        }

        return NSLocalizedString("statistics", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Status
      ///
      /// Locales: zh-Hans, en
      static func status(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("status", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "status"
        }

        return NSLocalizedString("status", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Success
      ///
      /// Locales: zh-Hans, en
      static func success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("success", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "success"
        }

        return NSLocalizedString("success", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Team
      ///
      /// Locales: zh-Hans, en
      static func team(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("team", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "team"
        }

        return NSLocalizedString("team", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Terms & Conditions
      ///
      /// Locales: zh-Hans, en
      static func terms_conditions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("terms_conditions", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "terms_conditions"
        }

        return NSLocalizedString("terms_conditions", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: Verify Account
      ///
      /// Locales: zh-Hans, en
      static func verify_header(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify_header", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "verify_header"
        }

        return NSLocalizedString("verify_header", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: dismiss
      ///
      /// Locales: zh-Hans, en
      static func dismiss(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dismiss", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "dismiss"
        }

        return NSLocalizedString("dismiss", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: email or password wrong
      ///
      /// Locales: zh-Hans, en
      static func email_or_password_wrong(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email_or_password_wrong", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "email_or_password_wrong"
        }

        return NSLocalizedString("email_or_password_wrong", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: incorrect email format
      ///
      /// Locales: zh-Hans, en
      static func incorrect_email_format(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("incorrect_email_format", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "incorrect_email_format"
        }

        return NSLocalizedString("incorrect_email_format", tableName: "i18n", bundle: bundle, comment: "")
      }

      /// en translation: incorrect password format.The password can only be 6 to 20 digits of English letters plus numbers and the following special characters!@#$&_-
      ///
      /// Locales: zh-Hans, en
      static func incorrect_password_format(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("incorrect_password_format", tableName: "i18n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "i18n", preferredLanguages: preferredLanguages) else {
          return "incorrect_password_format"
        }

        return NSLocalizedString("incorrect_password_format", tableName: "i18n", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AddProjectViewController.validate()
      try _AddTaskViewController.validate()
      try _ChatCell.validate()
      try _IntroViewController.validate()
      try _InviteCell.validate()
      try _LoginViewController.validate()
      try _MessagesCell.validate()
      try _NotificationsCell.validate()
      try _ProfileViewController.validate()
      try _TaskCell.validate()
      try _TaskOverviewViewController.validate()
      try _UserDetailViewController.validate()
      try _VerifyViewController.validate()
    }

    struct _AddProjectViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddProjectViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ScrollView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ScrollView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "task", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'task' is used in nib 'AddProjectViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _AddTaskViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddTaskViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ScrollView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ScrollView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "attachment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'attachment' is used in nib 'AddTaskViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checklist", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checklist' is used in nib 'AddTaskViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "watch", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'watch' is used in nib 'AddTaskViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CalendarViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CalendarViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ChatCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ChatCell

      let bundle = R.hostingBundle
      let identifier = "ChatCell"
      let name = "ChatCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "lauren", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'lauren' is used in nib 'ChatCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ChatViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ChatViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _DashboardViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DashboardViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _HelpViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HelpViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _IntroViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "IntroViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "intro_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'intro_background' is used in nib 'IntroViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in nib 'IntroViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _InviteCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = InviteCell

      let bundle = R.hostingBundle
      let identifier = "InviteCell"
      let name = "InviteCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InviteCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InviteCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "brian", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'brian' is used in nib 'InviteCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkbox_unselected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkbox_unselected' is used in nib 'InviteCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _InviteViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "InviteViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _LoginViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LoginViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "login_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'login_background' is used in nib 'LoginViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in nib 'LoginViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MessagesCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MessagesCell

      let bundle = R.hostingBundle
      let identifier = "MessageCell"
      let name = "MessagesCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MessagesCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MessagesCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "brian", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'brian' is used in nib 'MessagesCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MessagesViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MessagesViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _NotificationsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NotificationsCell

      let bundle = R.hostingBundle
      let identifier = "NotificationsCell"
      let name = "NotificationsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationsCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "brian", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'brian' is used in nib 'NotificationsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _NotificationsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NotificationsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _PrivacyViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PrivacyViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ProfileCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ProfileCell

      let bundle = R.hostingBundle
      let identifier = "ProfileCell"
      let name = "ProfileCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileCell
      }

      fileprivate init() {}
    }

    struct _ProfileViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProfileViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "avatar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'avatar' is used in nib 'ProfileViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit' is used in nib 'ProfileViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "photo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'photo' is used in nib 'ProfileViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SearchViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SearchViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SettingsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SettingsCell

      let bundle = R.hostingBundle
      let identifier = "SettingsCell"
      let name = "SettingsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsCell
      }

      fileprivate init() {}
    }

    struct _SettingsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SettingsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _StatisticsItemView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "StatisticsItemView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _StatisticsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "StatisticsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _TaskCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TaskCell

      let bundle = R.hostingBundle
      let identifier = "TaskCell"
      let name = "TaskCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TaskCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TaskCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "attachments", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'attachments' is used in nib 'TaskCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "liam", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'liam' is used in nib 'TaskCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu' is used in nib 'TaskCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "time", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'time' is used in nib 'TaskCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "view", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'view' is used in nib 'TaskCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TaskOverviewViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TaskOverviewViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ScrollView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ScrollView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "assignee", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'assignee' is used in nib 'TaskOverviewViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "due_date", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'due_date' is used in nib 'TaskOverviewViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "liam", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'liam' is used in nib 'TaskOverviewViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "thunder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'thunder' is used in nib 'TaskOverviewViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TermsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TermsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _UserDetailCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = UserDetailCell

      let bundle = R.hostingBundle
      let identifier = "UserDetailCell"
      let name = "UserDetailCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserDetailCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserDetailCell
      }

      fileprivate init() {}
    }

    struct _UserDetailViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "UserDetailViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "brian", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'brian' is used in nib 'UserDetailViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "call", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'call' is used in nib 'UserDetailViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chat", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chat' is used in nib 'UserDetailViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _VerifyViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "VerifyViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> View? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? View
      }

      static func validate() throws {
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in nib 'VerifyViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "verify", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'verify' is used in nib 'VerifyViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
